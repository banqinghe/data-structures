1.（二分查找的实现）请尝试用你实现的顺序存储List实现二分查找。List中的Record包含key和other部分。其中key为英文单词，other为单词的中文解释。
【输入】
第一行，查询目标target（英文单词）
第二行，若干条包含key（string）和other（string）的序列，序列按照key的升序排列；（单词数量小于2000）
【输出】查询目标所在的下标，查询目标的内容（key和other），若单词不存在则输出-1即可。
例如
【输入】
wait
computer 电脑 eye 眼睛 hello 你好 train 火车 wait 等待 zebra 斑马
【输出】
4
wait 等待
【输入】
apple
computer 电脑 eye 眼睛 hello 你好 train 火车 wait 等待 zebra 斑马
【输出】
-1 //不存在

2.（Start and end position）Given an array of integers numbers sorted in ascending order, find the starting and ending position of a given target value. Your algorithm's runtime complexity must be in the order of O(log n). If the target is not found in the array, return [-1, -1].
【输入】 
第一行，要查找的目标值
第二行，值按升序排列的整数数组，数组以-1结束（数组长度小于2000）
【输出】 目标值在数组里，第一次以及最后一次出现的下标
例如：
【输入】 
8
5 7 7 8 8 10 -1
【输出】
[3,4]
【输入】 
6
5 7 7 8 8 10 -1 
【输出】
[-1,-1]

3.（Sqrt function）Implement int sqrt(int x).Compute and return the square root of x, where x is guaranteed to be a non-negative integer. Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.
【输入】x的值，x为整数
【输出】x的平方根（整数）
例如：
【输入】 4
【输出】 2
【输入】 8
【输出】 2 //8的开方为2.82842，结果只需要输出整数，故输出2即可。

4.（Minimum Size Subarray Sum）Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum >=s. If there isn't one, return 0 instead.
*请尝试用O（nlogn）的算法复杂度解决该问题
【输入】 
第一行正整数s
第二行整数数组（数组中的值x在10000以内），数组以-1结束（数组长度小于2000）
【输出】 
符合条件的最小长度
符合条件的子序列，如果有多组答案符合要求，输出子序列的和最接近s，且开始下标最小的子序列
例如：
【输入】 
7
2 3 1 2 4 3 -1
【输出】 
2
4 3
【输入】 
7
2 3 1 6 4 3 -1
【输出】 
2
1 6