1. 请在你实现的链式存储的List基础上实现归并排序。
【输入】
第一行，待排序序列个数n，序列长度小于1000；
第二行，n个整数序列；
【输出】
归并排序的中间结果，即归并前的子序列1和子序列2；
归并排序的最终结果；
例如：
【输入】
5
9 3 8 2 5
【输出】
3 8 9//归并前的子序列1
2 5//归并前的子序列2
2 3 5 8 9 

2. 请在你实现的顺序存储的List基础上实现快速排序。（假设序列中的最后一个元素为轴点），此题需要按照课本的方法进行序列划分。
【输入】
第一行，待排序序列个数n，序列长度小于1000；
第二行，n个整数序列；
【输出】
快速排序的中间结果，即第一轮排序后序列的排列情况；
快速排序的最终结果；
例如：
【输入】
5
6 3 8 2 5
【输出】
2 3 5 8 6
2 3 5 6 8 

3. 请在你实现的顺序存储的List基础上实现堆排序。
【输入】
第一行，待排序序列个数n，序列长度小于1000；
第二行，n个整数序列；
【输出】
初始的堆；（大根堆）
堆排序后的结果；
例如：
【输入】
5
6 3 8 2 5
【输出】
8 5 6 2 3//输入序列构造的初始大根堆
2 3 5 6 8 

4. 优先级队列（priority queue） 是0个或多个元素的集合，每个元素都有一个优先权（在此假设数字越大优先权越高，一样大的数字优先权一样大）。对优先级队列执行的操作有（1）查找（2）插入一个新元素 （3）删除 一般情况下，查找操作用来搜索优先权最大的元素，删除操作用来删除该元素 。对于优先权相同的元素，可按先进先出次序处理或按任意优先权进行。请借助于堆实现优先级队列的数据结构。
要求：（1）采用顺序存储；（2）支持的操作有：删除元素操作（即取出最大优先级的元素）；插入元素操作；
【输入】
第一行，n个初始元素（元素大于0，顺序随机），以-1结束；n小于1000；
第二行，删除的元素个数m，m小于n
第三行，需要插入到优先级队列的元素序列，以-1结束；
【输出】
第一行，初始优先级队列的信息；（ 书本build_heap算法建堆）
第二行，删除m个元素后的优先级队列信息；
第三行，插入了若干元素后的优先级队列信息；
【输入】
6 3 8 2 5 -1//初始序列
2//从优先级队列中删除2个元素
12 7 9 -1//依次插入3个新的值
【输出】
8 5 6 2 3
5 2 3//删除了2个元素8，6后的优先级队列
12 7 9 2 5 3//依次插入12，7，9后的堆

5. Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue. Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.
请尝试编写适合该问题的排序算法。
最合适该问题的算法复杂度可控制在O(n)，辅助空间为常数。
【输入】0，1，2组成的任意整数序列，序列长度小于10000。
【输出】输出整数序列的顺序序列
例如：
【输入】2 0 2 1 1 0
【输出】0 0 1 1 2 2

6.(Top-k points) We have a list of points on the plane. Please find the K closest points to the origin (0, 0).
(Here, the distance between two points on a plane is the Euclidean distance. For point [x,y], the distance is Sqrt(x^2+y^2).
（若存在多个点与原点距离相等，则按照第1象限Quadrant，第2象限，第3象限，第4象限来取。）
（ 同一象限不存在距离相等的点）
Example 1:
Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:
Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
【输入】第一行K值，K为正整数，K小于1000；
第二行，n个点的坐标值(x,y)。
【输出】K个离原点最近的坐标点信息。（若存在多个点与原点距离相等，则按照第1象限Quadrant，第2象限，第3象限，第4象限来取。）
例如：
【输入】
2
3 3 5 -1 -2 4//坐标点(3,3),(5,-1),(-2,4),
【输出】
3 3 -2 4//坐标点(3,3),(-2,4)按照由近及远来排序