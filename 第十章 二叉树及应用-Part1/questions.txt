1. （二叉树遍历）请实现链式存储的二叉树结构。包含的操作有：插入元素（生成完全二叉树）、计算二叉树高度、前序、中序、后序遍历等。
【输入】
第一行，插入的元素个数，空格隔开的若干整数，整数数量小于2000；

【输出】
第一行，生成的完全二叉树的高度； （仅有一个node的二叉树高度为0）
第二行，二叉树前序遍历结果；
第三行，二叉树中序遍历结果；
第四行，二叉树后序遍历结果；

例如：
【输入】
10 0 1 2 3 4 5 6 7 8 9

【输出】
3
0  1  3  7  8  4  9  2  5  6
7  3  8  1  9  4  0  5  2  6
7  8  3  9  4  1  5  6  2  0

2. 给定一棵二叉树，判断这棵二叉树是否对称。
【输入】
第一行，插入的元素个数，空格隔开的若干整数或者null，数量小于2000；
【输出】
生成的二叉树的高度（仅有一个node的二叉树高度为0），是否为对称树

例如：
【输入】
7 1 2 2 3 4 4 3

    1
   / \
  2   2
 / \  / \
3  4 4  3

【输出】
2 true

【输入】
7 1 2 2 null 3 null 3

    1
   / \
  2   2
   \   \
   3    3

【输出】
2 false

3. 给定一棵二叉树和一个整数k，判断该二叉树中是否存在一条根节点至叶节点的路径，该路径上所有节点的值的和等于k。

【输入】
第一行 插入的元素个数，空格隔开的若干整数，数量小于2000；
第二行 整数k
【输出】
生成的二叉树的高度（仅有一个node的二叉树高度为0），是否存在这样一条路径，true或者false

例如：
【输入】
7 1 2 2 3 4 4 3
7

    1
   / \
  2   2
 / \  / \
3  4 4  3

【输出】
2 true

【输入】
6 1 3 2 3 4 7
10

    1
   / \
  3   2
 / \  /
3  4 7

【输出】
2 true

4. 请用链式存储的二叉查找树实现单词信息的查找。包含的操作有：插入元素、删除元素、查找元素等。
注意：Record包含key和other部分。其中key为英文单词，other为单词的中文解释。
【输入】
第1行，插入的单词数量，插入二叉查找树的单词信息，若干条包含key（string）和other（string）的序列；（单词数量小于2000）
第2行，删除的单词数量，从二叉查找树中删除的单词清单；（若为多个单词，会用空格隔开）（请用其前驱节点代替删除节点）
第3行，查询目标target1（英文单词）
第4行，查询目标target2（英文单词）

【输出】
第1行，查询目标1所在的路径信息和查询目标的内容（key和other），若单词不存在则输出NULL即可。
第2行，查询目标2所在的路径信息和查询目标的内容（key和other），若单词不存在则输出NULL即可。

例如
【输入】
6 train 火车  eye 眼睛 hello 你好 computer 电脑 wait 等待 zebra 斑马//插入
1 eye//删除
hello//查询目标1
eye//查询目标2
【输出】
train computer hello 你好//从根节点train开始，经过左孩子computer，然后右孩子，查找成功
train computer hello NULL//不存在
【说明】：
6个单词（train 火车  eye 眼睛 hello 你好 computer 电脑 wait 等待 zebra 斑马）生成的二叉查找树为：
      t
    /    \
  e      w
/    \      \
c    h      z

删除eye之后的查找树：
      t
    /    \
  c      w
    \      \
    h      z
在此基础上查找hello：访问路径为 t，c，h；成功
在此基础上查找eye，访问路径为：t，c，h，null；失败（h->left为空）

5. 请构建Buildable Tree（链式存储）实现单词信息的查找。包含的操作有：Buildable Tree的插入算法。
Record包含key和other部分。其中key为英文单词，other为单词的中文解释。
【输入】
第1行，插入的单词数量，插入二叉查找树的单词信息，若干条包含key（string）和other（string）的序列，序列按照key的升序排列；（单词数量小于2000）
第2行，查询目标target1（英文单词）
第3行，查询目标target2（英文单词）

【输出】
第1行，查询目标1所在的路径信息和查询目标的内容（key和other），若单词不存在则输出NULL即可。
第2行，查询目标2所在的路径信息和查询目标的内容（key和other），若单词不存在则输出NULL即可。

例如
【输入】
6 computer 电脑 eye 眼睛 hello 你好 train 火车 wait 等待 zebra 斑马// Buildable Tree的插入算法
hello//查询目标1
juice//查询目标2
【输出】
train eye hello 你好//从根节点train开始，经过左孩子eye，然后右孩子，查找成功
train eye hello NULL//不存在